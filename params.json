{"name":"Backbone-validator","tagline":"Backbone model-view validator","body":"backbone-validator [![Build Status](https://travis-ci.org/fantactuka/backbone-validator.png?branch=master)](https://travis-ci.org/fantactuka/backbone-validator)\r\n==================\r\n\r\nBackbone model validator allows you to define validation rules for model and utilize it for model-standalone validation or bind its events to the view so you can display errors if needed. Inspired by @thedersen's backbone-validation\r\n\r\n# Installation\r\nUsing [Bower](http://twitter.github.com/bower/) `bower install backbone-validator` or just copy [backbone-validator.js](https://raw.github.com/fantactuka/backbone-validator/master/backbone-validator.js)\r\n\r\n# Examples\r\n* **[JSFiddle](http://jsfiddle.net/fantactuka/6zh5y/)**: Data binding & model validation (with nested attributes) example using [Backbone.Validator](https://github.com/fantactuka/backbone-validator) + [Backbone.Stickit](https://github.com/nytimes/backbone.stickit)\r\n\r\n# Usage\r\n## Model\r\n\r\n```js\r\nvar User = Backbone.Model.extend({\r\n  validation: {\r\n    name: {\r\n      blank: false,\r\n      message: 'Name is required'\r\n    },\r\n    \r\n    email: {\r\n      required: true,\r\n      format: 'email',\r\n      message: 'Does not match format'\r\n    },\r\n    \r\n    books: {\r\n      collection: true\r\n    },\r\n    \r\n    address: {\r\n      model: true\r\n    },\r\n    \r\n    phone: [{\r\n      format: 'number',\r\n      message: 'Does not match format'\r\n    }, {\r\n      maxLength: 15,\r\n      message: function(attrName, attrValue, attrExpectation, validatorName) {\r\n        return 'Passed ' + attrName ' is too long. It is expected to be shorter than ' + attrExpectation + ' chars';\r\n      }\r\n    }]\r\n  }\r\n});\r\n\r\nvar user = new User();\r\n```\r\n**Setting attributes**\r\n```js\r\nuser.set({ email: 'wrong_format_email', phone: 'wrong_format_and_also_very_long' }, { validate: true }); \r\n// Attributes won't be set, since validation failed. Validation errors are stored\r\n\r\nuser.set({ email: 'wrong_format_email', phone: 'wrong_format_and_also_very_long' }, { validate: true, suppress: true }); \r\n// Attributes will be set, but model will trigger its validation events, and store validation errors as for previous case\r\n\r\nuser.validationError; // => { email: ['Does not match format'], phone: ['Does not match format', 'Too long'] };\r\n```\r\n**Saving model**\r\n```js\r\nuser.save(); \r\n// Validation triggered automatically. If nothing passed, it will validate entire model.\r\n\r\nuser.save({ email: 'user@example.com' }); \r\n// Validation triggered automatically. Validates only email.\r\n```\r\n**Checking model validity**\r\n```js\r\n// Model#isValidreturns boolean depending on model validity\r\nuser.isValid();                   // Will check all attributes\r\nuser.isValid(['email', 'name']);  // Will check specific attributes\r\nuser.isValid('email');            // Will check specific attribute\r\n\r\n// Model#validate returns null if model is valid (no errors), or errors object if any validation failed\r\nuser.validate();                   // Will check all attributes\r\nuser.validate(['email', 'name']);  // Will check specific attributes\r\nuser.validate('email');            // Will check specific attribute\r\n```\r\n**Triggering validation events manually**\r\n\r\nLet's say you've sent data to the back-end and it returned server-validation errors (e.g. that email is already taken) and you want to display these errors on UI.\r\nIt could be done by calling `triggerValidated` method that will trigger validation events, listened by the view and it will display errors:\r\n```js\r\nuser.save(null, {\r\n  success: function(response) {\r\n    if (response.errors) {\r\n      // Errors object should have same format as Backbone.Validator errors:\r\n      // { <attribute>: [<error>, <error>, <error>] }\r\n      //\r\n      // First argument is a list of attributes that will be triggered, second one - errors object\r\n      user.triggerValidated(_.keys(response.errors), response.errors);\r\n    }\r\n  }\r\n});\r\n```\r\nAnother case is when you want to reset validation on the form, and hide any validation error message, then you can run `triggerValidated` without any params, which will indicate (for the view) that none of model attributes is invalid:\r\n```js\r\nuser.clear();               // Unset attributes\r\nuser.triggerValidated();    // Trigger `validated` events for all attributes passing no errors into it\r\n```\r\n**Runtime configuration**\r\n\r\nIn some cases you might want to configure validation in a runtime so it dependant on model's state/fields. You can do it by specifying it as a function, returning validation object:\r\n```js\r\nvar User = Backbone.Model.extend({\r\n  validation: function() {\r\n    return {\r\n      name: {\r\n        required: true\r\n      },\r\n      \r\n      company: {\r\n        required: !this.isEmployee()\r\n      }\r\n    }\r\n  },\r\n  \r\n  isEmployee: function() {\r\n    ...\r\n  }\r\n});\r\n```\r\n\r\n**Errors post-processing**\r\n\r\nIn some cases you might need to re-format errors, e.g. flatten keys of nested models' errors, etc. In this case you can do it globally for all models via implementing custom `Backbone.Validator.ModelCallbacks.processErrors`, or you can override it for particular model via options passed to `validate()` and `isValid()` methods. E.g. \r\n```js\r\nmodel.validate(null, { \r\n  processErrors: function(errors) { \r\n    return flatten(errors); \r\n  } \r\n});\r\n\r\n// or any other method that calls #validate internaly\r\n\r\nmodel.set(newAttrs, { \r\n  processErrors: function(errors) { \r\n    return flatten(errors); \r\n  } \r\n});\r\n```\r\n\r\n## Error messages generator\r\nWhen using any internationalization you might want to have globaly defined error messages generator, that will translate errors into current locale in a runtime. In this case you can specify `Backbone.Validator.createMessage` method that will take precedence over default error messages:\r\n```js\r\nBackbone.Validator.createMessage = function(attrName, attrValue, validatorExpectation, validatorName) {\r\n  return i18n.translate(attrName + '.' + validatorName, { value: attrValue, expectation: validatorExpectation });\r\n};\r\n```\r\n\r\n## View\r\n```js\r\nvar UserView = Backbone.View.extend({\r\n  initialize: function() {\r\n    ...\r\n    this.model = new User();\r\n    this.bindValidation();\r\n  },\r\n  \r\n  onValidField: function(attrName, attrValue, model) {\r\n    // Triggered for each valid attribute\r\n  },\r\n  \r\n  onInvalidField: function(attrName, attrValue, errors, model) {\r\n    // Triggered for each invalid attribute.\r\n  }\r\n});\r\n```\r\n\r\nNote that `onValidField` and `onInvalidField` methods are optional for the view. By default it's taken from Backbone.Validator.ViewCallbacks. So you can override those defaults:\r\n```js\r\nValidator.ViewCallbacks = {\r\n  onValidField: function(name /*, value, model*/) {\r\n    var input = this.$('input[name=\"' + name + '\"]');\r\n    input.next('.error-text').remove();\r\n  },\r\n\r\n  onInvalidField: function(name, value, errors /*, model*/) {\r\n    var input = this.$('input[name=\"' + name + '\"]');\r\n    input.next('.error-text').remove();\r\n    input.after('<div class=\"error-text\">' + errors.join(', ') + '</div>');\r\n  }\r\n};\r\n```\r\n\r\nThese methods could be also passed as option to `bindValidation` method:\r\n```js\r\nbindValidation(this.model, {\r\n  onValidField: function() { ... },\r\n  onInvalidField: function() { ... }\r\n});\r\n```\r\n## Built-in validators\r\n\r\n* `required` - just checks value validity with `!!`\r\n* `blank` - checks strings, arrays, objects to be non-empty (white-spaces-only string considered as invalid)\r\n* `collection` - runs validation for models collection/array and returns indexed error object\r\n* `model` - runs validation for nested model\r\n* `minLength`\r\n* `maxLength`\r\n* `fn` - function that receives attribute value and returns true if it's valid, or false/error message if not\r\n* `format` - pattern matching.\r\n  * `email`\r\n  * `digits`\r\n  * `number`\r\n  * `url`\r\n  * It's possible to add custom formats via `Backbone.Validator.formats.phone = /(\\d){3,4}-(\\d){3,4}-(\\d){3,4}/;`\r\n\r\n**Please note:** string validators (`format`, `minLength`, `maxLength`) does not require field to exist. E.g. phone number could be optional, but should match format if it is not empty. So in case you need to check field existance as well - use `required` validator, otherwise empty string (undefined, null, false) will pass the validation.\r\n\r\nUsage examples:\r\n```js\r\nvar User = Backbone.Model.extend({\r\n  validation: {\r\n    name: {\r\n      required: true,\r\n      blank: false,\r\n      minLength: 2,\r\n      maxLength: 20,\r\n      fn: function(value) {\r\n        return ~valie.indexOf('a') ? 'Name should have at least one \"a\" letter' : true;\r\n      }\r\n    },\r\n    \r\n    phone: {\r\n      format: 'number'\r\n    },\r\n    \r\n    documents: {\r\n      collection: true\r\n    }\r\n  }\r\n});\r\n\r\n```\r\n## Adding validator\r\n```js\r\nBackbone.Validator.add('myCustomValidator', function(value, expectation) {\r\n  return value * value === expectation;\r\n}, 'Default error message');\r\n```\r\nValidation method could return true/false as well as error message or array of messages which will be treated as validation failure:\r\n```js\r\nBackbone.Validator.add('myCustomValidator', function(value, expectation) {\r\n  return value === expectation ? true : 'Value does not match expectation. Should be ' + expectation;\r\n});\r\n```\r\n\r\n\r\n## Standalone validator\r\nIn fact you can utilize validator for plain objects, so you can do something like this:\r\n```js\r\nvar validations = {\r\n  name: {\r\n    blank: false,\r\n    message: 'Name is required'\r\n  },\r\n  \r\n  email: {\r\n    blank: false,\r\n    format: 'email',\r\n    message: 'Does not match format'\r\n  }\r\n};\r\n\r\nBackbone.Validator.validate({ name: '', email: '' }, validations); // -> { name: ['Name is required'], email: ['Does not match format'] }\r\n```\r\n\r\n## Contributing\r\n* Before sending a pull request for a feature or bug fix, be sure to have specs.\r\n* Use the same coding style as the rest of the code.\r\n* In your pull request, do not addrebuild the minified file. It will be done during release process.\r\n* All pull requests should be made to the `master` branch.\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}